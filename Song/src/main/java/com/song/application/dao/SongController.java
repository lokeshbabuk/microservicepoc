/**
 * 
 */
package com.song.application.dao;


import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author M1028349
 *
 */
@RestController
@RequestMapping(path = "/song")
public class SongController {

	
	// This means to get the bean called userRepository
		// Which is auto-generated by Spring, we will use it to handle the data
		// private SongService songService;
	@Autowired
	private SongRepository songRepository;
	
	@RequestMapping(value="/add/{albumId}/song", 
            method=RequestMethod.POST)
	public String addSong(@RequestBody Song song ,@PathVariable Integer albumId){
		
		Album al=new Album(albumId,"","");
		song.setAlbum(al); 		
		songRepository.save(song);		
		return "Added Successfully";
			
	}
	
	@RequestMapping(value="/update/{albumId}/song", 
            method=RequestMethod.PUT)
	public String updateSong(@RequestBody Song song ,@PathVariable Integer albumId){
		
		Album al=new Album(albumId,"","");
		song.setAlbum(al); 		
		songRepository.save(song);		
		return "Updated Successfully";
			
	}
	

	@GetMapping(path = "/add")
	// Map ONLY GET Requests
	public @ResponseBody String addSong(@RequestParam Integer song_id,
			@RequestParam String title, @RequestParam String length,
			@RequestParam String track_number, @RequestParam String genre,
			@RequestParam String date_added, @RequestParam String date_modified, @RequestParam Integer albumId) {

		Song song = new Song();

		song.setSongid(song_id);
		song.setTitle(title);
		song.setLength(length);
		song.setTrack_number(track_number);
		song.setGenre(genre);
		song.setDate_added(date_added);
		song.setDate_modified(date_modified);
		song.setAlbumid(albumId);
		songRepository.save(song);

		// songService.addSong(song);
		return "Added Successfully";
	}

	@GetMapping(path = "/all")
	public @ResponseBody Iterable<Song> getAllSongs() {
		// This returns a JSON or XML with the users
		return songRepository.findAll();
	}
	
	@GetMapping(path = "/update")
	public @ResponseBody String updateSong(@RequestParam Integer song_id,
			@RequestParam String title, @RequestParam String length,
			@RequestParam String track_number, @RequestParam String genre,
			@RequestParam String date_added, @RequestParam String date_modified, @RequestParam Integer albumId) {

		Song song = new Song();

		song.setSongid(song_id);
		song.setTitle(title);
		song.setLength(length);
		song.setTrack_number(track_number);
		song.setGenre(genre);
		song.setDate_added(date_added);
		song.setDate_modified(date_modified);
		song.setAlbumid(albumId);
		songRepository.save(song);

		// songService.addSong(song);
		return "Updated Successfully";
	}
		
	@GetMapping(path = "/getsong")
	public @ResponseBody Song getSong(@RequestParam Integer songid) {
		// This returns a JSON or XML with the users
		return songRepository.findOne(songid);
	}	
	
		
	@GetMapping(path = "/getsongsbyalbumid")
	public @ResponseBody List <Song> getSongsByAlbumId(@RequestParam Integer albumid) {
		// This returns a JSON or XML with the users
		
		List<Song> songs=new ArrayList<>(); 
		songRepository.findByAlbumid(albumid).forEach(songs::add); 		 
		return songs;
	}
	
}
